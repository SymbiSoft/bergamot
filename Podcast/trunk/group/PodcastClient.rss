// rss

NAME HSEM

#include <eikon.rh>
#include <qikon.rh>
#include <qikcommand.rh>
#include "PodcastClient.hrh"


RESOURCE RSS_SIGNATURE { }
RESOURCE TBUF { buf = ""; }


RESOURCE EIK_APP_INFO
{
}

#include "CommandsCommon.ra"

/* Declare the set of controls to be used in the view */
RESOURCE QIK_CONTROL_COLLECTION r_my_scroll_bar_view_controls
    {
    items =
        {
        QIK_CONTROL
            {
            unique_handle = EMyViewScrollableContainer;
            type = EQikCtScrollableContainer;
            control = r_my_scroll_bar_scroll_pane;
            }
        };
    }


/* The view */
RESOURCE QIK_VIEW r_my_scroll_bar_view
    {
    pages = r_my_scroll_bar_viewpages;
    }
    
// The resource containing the pages
RESOURCE QIK_VIEW_PAGES r_my_scroll_bar_viewpages
    {
    pages=
        {
        // The page containing the controls in a scrollable container
        QIK_VIEW_PAGE
            {
            //Defining the type the container is
            container_unique_handle = EMyViewScrollableContainer;
            container_type = EQikCtScrollableContainer;
            container = r_my_scroll_bar_scroll_pane;
            
            // The container
            page_content=r_my_scroll_bar_view_container_details;
            }
        };
    }

/* The scrollable container used in the view */
RESOURCE QIK_SCROLLABLE_CONTAINER r_my_scroll_bar_scroll_pane
    {
    }

RESOURCE QIK_SCROLLABLE_CONTAINER_SETTINGS r_my_scroll_bar_view_container_details
{
flags = EQikContainerHandleRelayoutRequests |
            EQikContainerPersistsAfterRelayout |
            EQikContainerScrollHorizontalOff |
            EQikContainerScrollHorizontalNormal |
            EQikContainerScrollVerticalOn |
            EQikContainerScrollVerticalNormal |
            EQikContainerVerticalWrappingEnabled;

controls =
    {
    QIK_CONTAINER_ITEM_CI_LI
        {
        type = EQikCtOnelineBuildingBlock;
        control = r_my_scroll_bar_building_block;
        }
    };
}

RESOURCE QIK_SYSTEM_BUILDING_BLOCK r_my_scroll_bar_building_block
{
content =
    {
    QIK_SLOT_CONTENT
        {
        slot_id = EQikItemSlot1;
        caption = "Available Podcasts";
        },
    QIK_SLOT_CONTENT_DIRECT
        {
        slot_id = EQikItemSlot2;
        type=EEikCtEdwin;
        
        control =
            {
            EDWIN
                {
                flags=0;
                width=10;
                lines=1;
                maxlength=25;
                }
            };
        }
    };
}

RESOURCE QIK_VIEW_CONFIGURATIONS r_my_scroll_bar_ui_configurations
{
configurations=
    {
    QIK_VIEW_CONFIGURATION
        {
        ui_config_mode = KQikSoftkeyStylePortrait;
        view = r_my_scroll_bar_view;
        command_list = r_my_scroll_bar_commands;
        },
    QIK_VIEW_CONFIGURATION
        {
        ui_config_mode = KQikPenStyleTouchPortrait;
        view = r_my_scroll_bar_view;
        command_list = r_my_scroll_bar_commands;
        }
    };
}

RESOURCE QIK_COMMAND_LIST r_my_scroll_bar_commands
{
items =
    {
    // This command shall only be visible in debug mode because it is only
    // used to find memory leaks during development of the application.
    QIK_COMMAND
        {
        id = EEikCmdExit;
        type = EQikCommandTypeScreen;
        // Indicate that this command will only be visible in debug
        stateFlags = EQikCmdFlagDebugOnly;
        text = "Close (debug)";
        }
    };
}