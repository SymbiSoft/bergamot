// ListBoxEasy.rss
//
//  Symbian Software Ltd 2005. All rights reserved.
//

#include <eikon.rh>
#include <qikon.rh>
#include <qikcommand.rh>
#include <qiklistbox.rh>
#include <qiklistboxstandardlayouts.hrh>
#include <PodcastClient.mbg>
#include "PodcastClient.hrh"
#include "PodcastClient.rls"

// Use this statement to ensure that the resources in the file have a unique ID
// so that an application can use multiple resource files without resource ID
// conflict. This statement must be the first non-comment statement in the file.
NAME LIST

// The three following resources are mandatory fields and need to be the 
// first resource fields in the resource file. Need to be defined in this order.
// These resources don't need to contain any useful info, just need to be there.

// RSS_SIGNATURE can be used to specify version information
RESOURCE RSS_SIGNATURE { }

// Defines the name of the default file the application framework creates.
// This resource must always be the second resource in the resource file.
RESOURCE TBUF { buf = ""; }

// This resource is used to define an application's GUI. 
// Although it's not used directly by UIQ, its declaration is mandatory.
RESOURCE EIK_APP_INFO
	{
	}

#include "PodcastClientMainView.ra"
#include "PodcastClientPlayView.ra"

//----------------------------------------------------
//------------ CONFIGURATION FOR THE COMMON LISTVIEW ------------
//----------------------------------------------------
// The application supports the reference UI Configurations that are supported
// in the UIQ 3 SDK. Use the UiqEnv tool, to change the UI Configuration in the
// emulator in order to develop and test the application with varying phone styles.
RESOURCE QIK_VIEW_CONFIGURATIONS r_podcast_listview_ui_configurations
	{
	configurations = 
		{
		QIK_VIEW_CONFIGURATION
			{
			ui_config_mode = KQikPenStyleTouchPortrait;
			command_list = r_podcast_listview_commands;
			view = r_podcast_listview_layout;
			},
		QIK_VIEW_CONFIGURATION
			{
			ui_config_mode = KQikPenStyleTouchLandscape;
			command_list = r_podcast_listview_commands;
			view = r_podcast_listview_layout;
			},
		QIK_VIEW_CONFIGURATION
			{
			ui_config_mode = KQikSoftkeyStyleTouchPortrait;
			command_list = r_podcast_listview_commands;
			view = r_podcast_listview_layout;
			},
		QIK_VIEW_CONFIGURATION
			{
			ui_config_mode = KQikSoftkeyStylePortrait;
			command_list = r_podcast_listview_commands;
			view = r_podcast_listview_layout;
			},
		QIK_VIEW_CONFIGURATION
			{
			ui_config_mode = KQikSoftkeyStyleSmallPortrait;
			command_list = r_podcast_listview_commands;
			view = r_podcast_listview_layout;
			}
		};
	}

//----------------------------------------------------
//------------------ VIEW COMMANDS -------------------
//----------------------------------------------------
RESOURCE QIK_COMMAND_LIST r_podcast_listview_commands
	{
	items=
		{
		// This command shall only be visible in debug mode because it is only
		// used to find memory leaks during development of the application.
		QIK_COMMAND
			{
			id = EPodcastViewPlayer;
			type = EQikCommandTypeDone;
			text = STRING_r_view_player_cmd;
			},
		QIK_COMMAND
			{
			id = EPodcastView;
			type = EQikCommandTypeScreen;
			text = STRING_r_view_cmd;
			namedGroupLinkId= 1;
			},
		
			QIK_COMMAND
			{
			id = EPodcastViewMain;
			type = EQikCommandTypeScreen;
			text = STRING_r_view_main_cmd;
			namedGroupId = 1;
			},
			QIK_COMMAND
			{
			id = EPodcastViewShows;
			type = EQikCommandTypeScreen;
			text = STRING_r_view_shows_cmd;
			namedGroupId = 1;
			},
			QIK_COMMAND
			{
			id = EPodcastViewFeeds;
			type = EQikCommandTypeScreen;
			text = STRING_r_view_feeds_cmd;
			namedGroupId = 1;
			},
			QIK_COMMAND
			{
			id = EPodcastUpdateFeed;
			type = EQikCommandTypeItem;
			text = STRING_r_update_feeds_cmd;
			},
			
		QIK_COMMAND
			{
			id = EEikCmdExit;
			type = EQikCommandTypeScreen;
			// Indicate that it will only be created in debug builds
			stateFlags = EQikCmdFlagDebugOnly;
			text = STRING_r_listbox_listview_cmd_close_debug;
			shortText = STRING_r_listbox_listview_cmd_close_debug_shorttext;
			}
		};
	}

//----------------------------------------------------
//----------------- LISTVIEW LAYOUT ------------------
//----------------------------------------------------
RESOURCE QIK_VIEW r_podcast_listview_layout
	{
	pages = r_podcast_listview_layout_pages;
	}

RESOURCE QIK_VIEW_PAGES r_podcast_listview_layout_pages
	{
	pages = 
		{
		QIK_VIEW_PAGE
			{
			page_id = EPodcastListViewPage;
			page_content = r_podcast_listview_page_control;
			}
		};
	}

// The page contains a list box that fills the whole application space.
RESOURCE QIK_CONTAINER_SETTINGS r_podcast_listview_page_control
	{
	layout_manager_type = EQikRowLayoutManager;
	layout_manager = r_podcast_row_layout_manager_default;
	controls = 
		{
		QIK_CONTAINER_ITEM_CI_LI
			{ 
			unique_handle = EPodcastListViewListCtrl;
			type = EQikCtListBox; 
			control = r_podcast_listview_listbox;
			// This will make it so that the list box fills the whole 
			// application space.
			layout_data = r_podcast_row_layout_data_fill;
			}
		};
	}
	
//----------------------------------------------------
//----------- LISTVIEW CONTROL: LISTBOX --------------
//----------------------------------------------------
// The list box structs type property default to EQikRowListBox, so we need to 
// redefine it. As we want default values for the QIK_LISTBOX_ROW_VIEW struct, 
// we do not need to declare such a resource and link to it, since the default 
// behavior is to load a resource for the row view which already has all 
// properties set to default. All we really have to do is to define our layout 
// pair and add them to the list box.
RESOURCE QIK_LISTBOX r_podcast_listview_listbox
	{
	layouts = { r_podcast_listview_normal_layout_pair };
	}

// Layouts are always added in layout pair to the list box. A layout pair 
// consists of one mandatory normal layout and an optional highlight layout.
// Normal layout - The layout used when an item is not highlighted, or is 
// highlighted but has no additional highlight layout.
RESOURCE QIK_LISTBOX_LAYOUT_PAIR r_podcast_listview_normal_layout_pair
	{
	standard_normal_layout = EQikListBoxIconTwoLines; //EQikListBoxLine;
	}

RESOURCE QIK_LISTBOX_LAYOUT r_normal_layout
{
columns=
    {
    QIK_LISTBOX_COLUMN
        {
        // Set the text to be scrolled/swapped if it does not fit
        type=QIK_LISTBOX_TEXT_TYPE{scroll=EQikListBoxTextScrollWhenHighlighted;};
        width_type=EQikListBoxColWidthGrab;
        width_value=1;
        slot_id=EQikListBoxSlotText1;
        }
    };
}
//----------------------------------------------------
//--------------- ROW LAYOUT MANAGER -----------------
//----------------------------------------------------
RESOURCE QIK_ROW_LAYOUT_MANAGER r_podcast_row_layout_manager_default
	{
	default_layout_data = QIK_ROW_LAYOUT_DATA {};
	}

//----------------------------------------------------
//----------------- ROW LAYOUT DATA ------------------
//----------------------------------------------------
RESOURCE QIK_ROW_LAYOUT_DATA r_podcast_row_layout_data_fill
	{
	vertical_alignment = EQikLayoutVAlignFill;
	vertical_excess_grab_weight = 1;
	}

// Common string resources
RESOURCE TBUF r_podcast_feeds_title
{
	buf = STRING_r_view_feeds_title;
}

RESOURCE TBUF r_podcast_feeds_category
{
	buf = STRING_r_view_feeds_cmd;
}

RESOURCE TBUF r_podcast_feeds_download_cmd
{
	buf = STRING_r_view_download_cmd;
}

RESOURCE TBUF r_podcast_feeds_play_cmd
{
	buf = STRING_r_view_play_cmd;
}

RESOURCE TBUF r_podcast_player_pause_cmd
{
	buf = STRING_r_pause_cmd;
}

RESOURCE TBUF r_podcast_player_play_cmd
{
	buf = STRING_r_play_cmd;
}


RESOURCE TBUF r_podcast_shows_title
{
	buf = STRING_r_view_shows_title;
}
